#!/usr/bin/env python
PACKAGE = "orbus_interface"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("Ratio",  double_t, 0, "[#] Gear ratio",                   1,  0)

rotation = gen.enum([ gen.const("Clockwise",        int_t, -1, "Clockwise rotation"),
                      gen.const("Counterclockwise", int_t,  1, "Counterclockwise rotation")],
                      "Rotation versus wheel")
gen.add("Rotation", int_t, 0, "Versus of the rotation of the motor", 1, -1, 1, edit_method=rotation)

cascade = gen.enum([ gen.const("Disable",        int_t, 0, "Disable the cascade control"),
                      gen.const("Enable", int_t,  1, "Enable the cascade control")],
                      "Cascade")
gen.add("Cascade_control", int_t, 0, "Type of control", 0, 0, 1, edit_method=cascade)

# Bridge
enable = gen.enum([ gen.const("Low",  int_t, 0, "Enable normally low"),
                    gen.const("High", int_t, 1, "Enable normally high")],
                    "Logic state")
gen.add("H_bridge_enable", int_t, 0, "Default logic value to enable the H bridge", 0, 0, 1, edit_method=enable)

gen.add("PWM_Dead_zone",  double_t, 0, "[mS] Dead Zone PWM",                    0,  0)
gen.add("PWM_Frequency",     int_t,    0, "[Hz] frequency of execution PWM",       0,   1, 100)

gen.add("Voltage_Offset", double_t, 0, "[V] Voltage sense offset", 1,  0)
gen.add("Voltage_Gain", double_t, 0, "[V/V] Gain Voltage", 1,  0)

gen.add("Current_Offset", double_t, 0, "[V] Current sense offset in volt", 0,  0)
gen.add("Current_Gain", double_t, 0, "[V/A] Current sense gain in Volt Ampere", 1,  0)
# Encoder
gen.add("CPR",       int_t, 0, "[#] An Integer parameter",        1,  0, 65535)

enc_pos = gen.enum([ gen.const("After",  int_t, 0, "After gears"),
                    gen.const("Before", int_t, 1, "Before gears")],
                    "Position")
gen.add("Encoder_Position", int_t, 0, "Position encoder respect to gears", 1, 0, 1, edit_method=enc_pos)

enc_z_index = gen.enum([ gen.const("NO",  int_t, 0, "Without Z index"),
                    gen.const("YES", int_t, 1, "Z index")],
                    "Z-Index")
gen.add("Encoder_Z_index", int_t, 0, "This encoder use the Z index to find 0 position", 0, 0, 1, edit_method=enc_z_index)

enc_channel = gen.enum([ gen.const("ONE",  int_t, 1, "Single channel"),
                    gen.const("TWO", int_t, 2, "Two channels")],
                    "Channels")
gen.add("Encoder_Channels", int_t, 0, "How many channel have your encoder", 2, 1, 2, edit_method=enc_channel)

gen.add("Store_in_EEPROM", bool_t  , 0, "Store this data in uNav EEPROM", False)
gen.add("restore_defaults", bool_t  , 0, "Restore to the original configuration", False)

exit(gen.generate(PACKAGE, "hardware_unav", "UnavParameter"))
